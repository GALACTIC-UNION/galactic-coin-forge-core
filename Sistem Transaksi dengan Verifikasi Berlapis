from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.serialization import load_pem_private_key, load_pem_public_key
import secrets

class Transaction:
    def __init__(self, sender, receiver, amount, signatures_required=2):
        self.sender = sender
        self.receiver = receiver
        self.amount = amount
        self.id = hashlib.sha256(f"{secrets.token_bytes(16)}".encode()).hexdigest()
        self.signatures_required = signatures_required
        self.signatures = []

    def sign_transaction(self, private_key):
        signature = private_key.sign(
            self.id.encode(),
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )
        self.signatures.append(signature)
        print(f"Signature added. Total signatures: {len(self.signatures)}")

    def execute(self):
        if len(self.signatures) >= self.signatures_required:
            self.receiver.deposit(self.amount)
            self.sender.withdraw(self.amount, self.signatures)
            print(f"Transaction {self.id} executed.")
        else:
            raise ValueError("Transaction failed: insufficient signatures")

# Contoh Penggunaan
sender_wallet = Wallet()
receiver_wallet = Wallet()
transaction = Transaction(sender_wallet, receiver_wallet, 100)

# Pengguna menandatangani transaksi dengan kunci pribadi mereka
private_key, public_key = generate_keys()  # Sebagai contoh
transaction.sign_transaction(load_pem_private_key(private_key, None))
transaction.sign_transaction(load_pem_private_key(private_key, None))

# Eksekusi transaksi jika cukup tanda tangan
transaction.execute()
